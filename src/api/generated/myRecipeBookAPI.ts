/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * MyRecipeBook.API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetUserLoginGoogleParams,
  PostRecipeRegisterBody,
  PutUpdateImageRecipeIdBody,
  RequestRecipeFilterJson,
  RequestRecipeIngredientsForAIJson,
  RequestRecipeJson,
  RequestRefreshTokenJson,
  RequestUserChangePasswordJson,
  RequestUserLoginJson,
  RequestUserRegisterJson,
  RequestUserResetPasswordJson,
  RequestUserUpdateJson,
  ResponseErrorJson,
  ResponseRecipeJson,
  ResponseShortRecipeJson,
  ResponseSuccessLogoutJson,
  ResponseTokenJson,
  ResponseUserLoginJson,
  ResponseUserProfileJson,
  ResponseUserRegisterJson
} from './myRecipeBookAPI.schemas';

import { customInstance } from '../axios-instance';




export const postRecipeRegister = (
    postRecipeRegisterBody: PostRecipeRegisterBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postRecipeRegisterBody.ImageFile !== undefined) {
 formData.append('ImageFile', postRecipeRegisterBody.ImageFile)
 }
if(postRecipeRegisterBody.Title !== undefined) {
 formData.append('Title', postRecipeRegisterBody.Title)
 }
if(postRecipeRegisterBody.CookingTime !== undefined) {
 formData.append('CookingTime', postRecipeRegisterBody.CookingTime.toString())
 }
if(postRecipeRegisterBody.Difficulty !== undefined) {
 formData.append('Difficulty', postRecipeRegisterBody.Difficulty.toString())
 }
if(postRecipeRegisterBody.Ingredients !== undefined) {
 postRecipeRegisterBody.Ingredients.forEach(value => formData.append('Ingredients', value));
 }
if(postRecipeRegisterBody.DishTypes !== undefined) {
 postRecipeRegisterBody.DishTypes.forEach(value => formData.append('DishTypes', value.toString()));
 }
if(postRecipeRegisterBody.Instructions !== undefined) {
 postRecipeRegisterBody.Instructions.forEach(value => formData.append('Instructions', JSON.stringify(value)));
 }

      return customInstance<ResponseRecipeJson>(
      {url: `/recipe/register`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostRecipeRegisterMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRecipeRegister>>, TError,{data: PostRecipeRegisterBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRecipeRegister>>, TError,{data: PostRecipeRegisterBody}, TContext> => {
    
const mutationKey = ['postRecipeRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRecipeRegister>>, {data: PostRecipeRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postRecipeRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRecipeRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postRecipeRegister>>>
    export type PostRecipeRegisterMutationBody = PostRecipeRegisterBody
    export type PostRecipeRegisterMutationError = ResponseErrorJson

    export const usePostRecipeRegister = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRecipeRegister>>, TError,{data: PostRecipeRegisterBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postRecipeRegister>>,
        TError,
        {data: PostRecipeRegisterBody},
        TContext
      > => {

      const mutationOptions = getPostRecipeRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postRecipeFilter = (
    requestRecipeFilterJson: RequestRecipeFilterJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseShortRecipeJson[] | void>(
      {url: `/recipe/filter`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestRecipeFilterJson, signal
    },
      );
    }
  


export const getPostRecipeFilterMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRecipeFilter>>, TError,{data: RequestRecipeFilterJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRecipeFilter>>, TError,{data: RequestRecipeFilterJson}, TContext> => {
    
const mutationKey = ['postRecipeFilter'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRecipeFilter>>, {data: RequestRecipeFilterJson}> = (props) => {
          const {data} = props ?? {};

          return  postRecipeFilter(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRecipeFilterMutationResult = NonNullable<Awaited<ReturnType<typeof postRecipeFilter>>>
    export type PostRecipeFilterMutationBody = RequestRecipeFilterJson
    export type PostRecipeFilterMutationError = ResponseErrorJson

    export const usePostRecipeFilter = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRecipeFilter>>, TError,{data: RequestRecipeFilterJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postRecipeFilter>>,
        TError,
        {data: RequestRecipeFilterJson},
        TContext
      > => {

      const mutationOptions = getPostRecipeFilterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getRecipeGetbyidRecipeId = (
    recipeId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseRecipeJson>(
      {url: `/recipe/getbyid/${recipeId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetRecipeGetbyidRecipeIdQueryKey = (recipeId: string,) => {
    return [`/recipe/getbyid/${recipeId}`] as const;
    }

    
export const getGetRecipeGetbyidRecipeIdQueryOptions = <TData = Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>, TError = ResponseErrorJson>(recipeId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecipeGetbyidRecipeIdQueryKey(recipeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>> = ({ signal }) => getRecipeGetbyidRecipeId(recipeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(recipeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRecipeGetbyidRecipeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>>
export type GetRecipeGetbyidRecipeIdQueryError = ResponseErrorJson



export function useGetRecipeGetbyidRecipeId<TData = Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>, TError = ResponseErrorJson>(
 recipeId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipeGetbyidRecipeId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRecipeGetbyidRecipeIdQueryOptions(recipeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const getRecipeGetbyuserNumberOfRecipes = (
    numberOfRecipes: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseShortRecipeJson[] | void>(
      {url: `/recipe/getbyuser/${numberOfRecipes}`, method: 'GET', signal
    },
      );
    }
  

export const getGetRecipeGetbyuserNumberOfRecipesQueryKey = (numberOfRecipes: number,) => {
    return [`/recipe/getbyuser/${numberOfRecipes}`] as const;
    }

    
export const getGetRecipeGetbyuserNumberOfRecipesQueryOptions = <TData = Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>, TError = ResponseErrorJson>(numberOfRecipes: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecipeGetbyuserNumberOfRecipesQueryKey(numberOfRecipes);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>> = ({ signal }) => getRecipeGetbyuserNumberOfRecipes(numberOfRecipes, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(numberOfRecipes), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRecipeGetbyuserNumberOfRecipesQueryResult = NonNullable<Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>>
export type GetRecipeGetbyuserNumberOfRecipesQueryError = ResponseErrorJson



export function useGetRecipeGetbyuserNumberOfRecipes<TData = Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>, TError = ResponseErrorJson>(
 numberOfRecipes: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRecipeGetbyuserNumberOfRecipes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRecipeGetbyuserNumberOfRecipesQueryOptions(numberOfRecipes,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const deleteRecipeDeletebyidRecipeId = (
    recipeId: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/recipe/deletebyid/${recipeId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteRecipeDeletebyidRecipeIdMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRecipeDeletebyidRecipeId>>, TError,{recipeId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteRecipeDeletebyidRecipeId>>, TError,{recipeId: string}, TContext> => {
    
const mutationKey = ['deleteRecipeDeletebyidRecipeId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRecipeDeletebyidRecipeId>>, {recipeId: string}> = (props) => {
          const {recipeId} = props ?? {};

          return  deleteRecipeDeletebyidRecipeId(recipeId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRecipeDeletebyidRecipeIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRecipeDeletebyidRecipeId>>>
    
    export type DeleteRecipeDeletebyidRecipeIdMutationError = ResponseErrorJson

    export const useDeleteRecipeDeletebyidRecipeId = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRecipeDeletebyidRecipeId>>, TError,{recipeId: string}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteRecipeDeletebyidRecipeId>>,
        TError,
        {recipeId: string},
        TContext
      > => {

      const mutationOptions = getDeleteRecipeDeletebyidRecipeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putRecipeUpdateRecipeId = (
    recipeId: string,
    requestRecipeJson: RequestRecipeJson,
 ) => {
      
      
      return customInstance<ResponseRecipeJson>(
      {url: `/recipe/update/${recipeId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: requestRecipeJson
    },
      );
    }
  


export const getPutRecipeUpdateRecipeIdMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRecipeUpdateRecipeId>>, TError,{recipeId: string;data: RequestRecipeJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putRecipeUpdateRecipeId>>, TError,{recipeId: string;data: RequestRecipeJson}, TContext> => {
    
const mutationKey = ['putRecipeUpdateRecipeId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putRecipeUpdateRecipeId>>, {recipeId: string;data: RequestRecipeJson}> = (props) => {
          const {recipeId,data} = props ?? {};

          return  putRecipeUpdateRecipeId(recipeId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutRecipeUpdateRecipeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putRecipeUpdateRecipeId>>>
    export type PutRecipeUpdateRecipeIdMutationBody = RequestRecipeJson
    export type PutRecipeUpdateRecipeIdMutationError = ResponseErrorJson

    export const usePutRecipeUpdateRecipeId = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putRecipeUpdateRecipeId>>, TError,{recipeId: string;data: RequestRecipeJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putRecipeUpdateRecipeId>>,
        TError,
        {recipeId: string;data: RequestRecipeJson},
        TContext
      > => {

      const mutationOptions = getPutRecipeUpdateRecipeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postRecipeGeneratewithai = (
    requestRecipeIngredientsForAIJson: RequestRecipeIngredientsForAIJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseRecipeJson>(
      {url: `/recipe/generatewithai`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestRecipeIngredientsForAIJson, signal
    },
      );
    }
  


export const getPostRecipeGeneratewithaiMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRecipeGeneratewithai>>, TError,{data: RequestRecipeIngredientsForAIJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postRecipeGeneratewithai>>, TError,{data: RequestRecipeIngredientsForAIJson}, TContext> => {
    
const mutationKey = ['postRecipeGeneratewithai'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRecipeGeneratewithai>>, {data: RequestRecipeIngredientsForAIJson}> = (props) => {
          const {data} = props ?? {};

          return  postRecipeGeneratewithai(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostRecipeGeneratewithaiMutationResult = NonNullable<Awaited<ReturnType<typeof postRecipeGeneratewithai>>>
    export type PostRecipeGeneratewithaiMutationBody = RequestRecipeIngredientsForAIJson
    export type PostRecipeGeneratewithaiMutationError = ResponseErrorJson

    export const usePostRecipeGeneratewithai = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postRecipeGeneratewithai>>, TError,{data: RequestRecipeIngredientsForAIJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postRecipeGeneratewithai>>,
        TError,
        {data: RequestRecipeIngredientsForAIJson},
        TContext
      > => {

      const mutationOptions = getPostRecipeGeneratewithaiMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putUpdateImageRecipeId = (
    recipeId: string,
    putUpdateImageRecipeIdBody: PutUpdateImageRecipeIdBody,
 ) => {
      
      const formData = new FormData();
if(putUpdateImageRecipeIdBody.file !== undefined) {
 formData.append('file', putUpdateImageRecipeIdBody.file)
 }

      return customInstance<void>(
      {url: `/update/image/${recipeId}`, method: 'PUT',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      );
    }
  


export const getPutUpdateImageRecipeIdMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUpdateImageRecipeId>>, TError,{recipeId: string;data: PutUpdateImageRecipeIdBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putUpdateImageRecipeId>>, TError,{recipeId: string;data: PutUpdateImageRecipeIdBody}, TContext> => {
    
const mutationKey = ['putUpdateImageRecipeId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUpdateImageRecipeId>>, {recipeId: string;data: PutUpdateImageRecipeIdBody}> = (props) => {
          const {recipeId,data} = props ?? {};

          return  putUpdateImageRecipeId(recipeId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUpdateImageRecipeIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUpdateImageRecipeId>>>
    export type PutUpdateImageRecipeIdMutationBody = PutUpdateImageRecipeIdBody
    export type PutUpdateImageRecipeIdMutationError = ResponseErrorJson

    export const usePutUpdateImageRecipeId = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUpdateImageRecipeId>>, TError,{recipeId: string;data: PutUpdateImageRecipeIdBody}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putUpdateImageRecipeId>>,
        TError,
        {recipeId: string;data: PutUpdateImageRecipeIdBody},
        TContext
      > => {

      const mutationOptions = getPutUpdateImageRecipeIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postUserRegister = (
    requestUserRegisterJson: RequestUserRegisterJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseUserRegisterJson>(
      {url: `/user/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestUserRegisterJson, signal
    },
      );
    }
  


export const getPostUserRegisterMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserRegister>>, TError,{data: RequestUserRegisterJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserRegister>>, TError,{data: RequestUserRegisterJson}, TContext> => {
    
const mutationKey = ['postUserRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserRegister>>, {data: RequestUserRegisterJson}> = (props) => {
          const {data} = props ?? {};

          return  postUserRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postUserRegister>>>
    export type PostUserRegisterMutationBody = RequestUserRegisterJson
    export type PostUserRegisterMutationError = ResponseErrorJson

    export const usePostUserRegister = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserRegister>>, TError,{data: RequestUserRegisterJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserRegister>>,
        TError,
        {data: RequestUserRegisterJson},
        TContext
      > => {

      const mutationOptions = getPostUserRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postUserLogin = (
    requestUserLoginJson: RequestUserLoginJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseUserLoginJson>(
      {url: `/user/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestUserLoginJson, signal
    },
      );
    }
  


export const getPostUserLoginMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserLogin>>, TError,{data: RequestUserLoginJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserLogin>>, TError,{data: RequestUserLoginJson}, TContext> => {
    
const mutationKey = ['postUserLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserLogin>>, {data: RequestUserLoginJson}> = (props) => {
          const {data} = props ?? {};

          return  postUserLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postUserLogin>>>
    export type PostUserLoginMutationBody = RequestUserLoginJson
    export type PostUserLoginMutationError = ResponseErrorJson

    export const usePostUserLogin = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserLogin>>, TError,{data: RequestUserLoginJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserLogin>>,
        TError,
        {data: RequestUserLoginJson},
        TContext
      > => {

      const mutationOptions = getPostUserLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUserLoginGoogle = (
    params?: GetUserLoginGoogleParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/login/google`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetUserLoginGoogleQueryKey = (params?: GetUserLoginGoogleParams,) => {
    return [`/user/login/google`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserLoginGoogleQueryOptions = <TData = Awaited<ReturnType<typeof getUserLoginGoogle>>, TError = unknown>(params?: GetUserLoginGoogleParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserLoginGoogle>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserLoginGoogleQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserLoginGoogle>>> = ({ signal }) => getUserLoginGoogle(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserLoginGoogle>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserLoginGoogleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserLoginGoogle>>>
export type GetUserLoginGoogleQueryError = unknown



export function useGetUserLoginGoogle<TData = Awaited<ReturnType<typeof getUserLoginGoogle>>, TError = unknown>(
 params?: GetUserLoginGoogleParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserLoginGoogle>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserLoginGoogleQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postUserLogout = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseSuccessLogoutJson>(
      {url: `/user/logout`, method: 'POST', signal
    },
      );
    }
  


export const getPostUserLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserLogout>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserLogout>>, TError,void, TContext> => {
    
const mutationKey = ['postUserLogout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserLogout>>, void> = () => {
          

          return  postUserLogout()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postUserLogout>>>
    
    export type PostUserLogoutMutationError = unknown

    export const usePostUserLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserLogout>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostUserLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postUserRefreshToken = (
    requestRefreshTokenJson: RequestRefreshTokenJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseTokenJson>(
      {url: `/user/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestRefreshTokenJson, signal
    },
      );
    }
  


export const getPostUserRefreshTokenMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserRefreshToken>>, TError,{data: RequestRefreshTokenJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserRefreshToken>>, TError,{data: RequestRefreshTokenJson}, TContext> => {
    
const mutationKey = ['postUserRefreshToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserRefreshToken>>, {data: RequestRefreshTokenJson}> = (props) => {
          const {data} = props ?? {};

          return  postUserRefreshToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserRefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postUserRefreshToken>>>
    export type PostUserRefreshTokenMutationBody = RequestRefreshTokenJson
    export type PostUserRefreshTokenMutationError = ResponseErrorJson

    export const usePostUserRefreshToken = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserRefreshToken>>, TError,{data: RequestRefreshTokenJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserRefreshToken>>,
        TError,
        {data: RequestRefreshTokenJson},
        TContext
      > => {

      const mutationOptions = getPostUserRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUserGetResetPasswordCodeEmail = (
    email: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/get-reset-password-code/${email}`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserGetResetPasswordCodeEmailQueryKey = (email: string,) => {
    return [`/user/get-reset-password-code/${email}`] as const;
    }

    
export const getGetUserGetResetPasswordCodeEmailQueryOptions = <TData = Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>, TError = unknown>(email: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserGetResetPasswordCodeEmailQueryKey(email);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>> = ({ signal }) => getUserGetResetPasswordCodeEmail(email, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(email), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserGetResetPasswordCodeEmailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>>
export type GetUserGetResetPasswordCodeEmailQueryError = unknown



export function useGetUserGetResetPasswordCodeEmail<TData = Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>, TError = unknown>(
 email: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserGetResetPasswordCodeEmail>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserGetResetPasswordCodeEmailQueryOptions(email,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postUserResetPassword = (
    requestUserResetPasswordJson: RequestUserResetPasswordJson,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/user/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: requestUserResetPasswordJson, signal
    },
      );
    }
  


export const getPostUserResetPasswordMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserResetPassword>>, TError,{data: RequestUserResetPasswordJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postUserResetPassword>>, TError,{data: RequestUserResetPasswordJson}, TContext> => {
    
const mutationKey = ['postUserResetPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUserResetPassword>>, {data: RequestUserResetPasswordJson}> = (props) => {
          const {data} = props ?? {};

          return  postUserResetPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUserResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postUserResetPassword>>>
    export type PostUserResetPasswordMutationBody = RequestUserResetPasswordJson
    export type PostUserResetPasswordMutationError = ResponseErrorJson

    export const usePostUserResetPassword = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUserResetPassword>>, TError,{data: RequestUserResetPasswordJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postUserResetPassword>>,
        TError,
        {data: RequestUserResetPasswordJson},
        TContext
      > => {

      const mutationOptions = getPostUserResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUserGetprofilewithtoken = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ResponseUserProfileJson>(
      {url: `/user/getprofilewithtoken`, method: 'GET', signal
    },
      );
    }
  

export const getGetUserGetprofilewithtokenQueryKey = () => {
    return [`/user/getprofilewithtoken`] as const;
    }

    
export const getGetUserGetprofilewithtokenQueryOptions = <TData = Awaited<ReturnType<typeof getUserGetprofilewithtoken>>, TError = ResponseErrorJson>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserGetprofilewithtoken>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserGetprofilewithtokenQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserGetprofilewithtoken>>> = ({ signal }) => getUserGetprofilewithtoken(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserGetprofilewithtoken>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserGetprofilewithtokenQueryResult = NonNullable<Awaited<ReturnType<typeof getUserGetprofilewithtoken>>>
export type GetUserGetprofilewithtokenQueryError = ResponseErrorJson



export function useGetUserGetprofilewithtoken<TData = Awaited<ReturnType<typeof getUserGetprofilewithtoken>>, TError = ResponseErrorJson>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserGetprofilewithtoken>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserGetprofilewithtokenQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const putUserUpdate = (
    requestUserUpdateJson: RequestUserUpdateJson,
 ) => {
      
      
      return customInstance<ResponseUserProfileJson>(
      {url: `/user/update`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: requestUserUpdateJson
    },
      );
    }
  


export const getPutUserUpdateMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserUpdate>>, TError,{data: RequestUserUpdateJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putUserUpdate>>, TError,{data: RequestUserUpdateJson}, TContext> => {
    
const mutationKey = ['putUserUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUserUpdate>>, {data: RequestUserUpdateJson}> = (props) => {
          const {data} = props ?? {};

          return  putUserUpdate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUserUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof putUserUpdate>>>
    export type PutUserUpdateMutationBody = RequestUserUpdateJson
    export type PutUserUpdateMutationError = ResponseErrorJson

    export const usePutUserUpdate = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserUpdate>>, TError,{data: RequestUserUpdateJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putUserUpdate>>,
        TError,
        {data: RequestUserUpdateJson},
        TContext
      > => {

      const mutationOptions = getPutUserUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putUserChangepassword = (
    requestUserChangePasswordJson: RequestUserChangePasswordJson,
 ) => {
      
      
      return customInstance<void>(
      {url: `/user/changepassword`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: requestUserChangePasswordJson
    },
      );
    }
  


export const getPutUserChangepasswordMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserChangepassword>>, TError,{data: RequestUserChangePasswordJson}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putUserChangepassword>>, TError,{data: RequestUserChangePasswordJson}, TContext> => {
    
const mutationKey = ['putUserChangepassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUserChangepassword>>, {data: RequestUserChangePasswordJson}> = (props) => {
          const {data} = props ?? {};

          return  putUserChangepassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutUserChangepasswordMutationResult = NonNullable<Awaited<ReturnType<typeof putUserChangepassword>>>
    export type PutUserChangepasswordMutationBody = RequestUserChangePasswordJson
    export type PutUserChangepasswordMutationError = ResponseErrorJson

    export const usePutUserChangepassword = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUserChangepassword>>, TError,{data: RequestUserChangePasswordJson}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof putUserChangepassword>>,
        TError,
        {data: RequestUserChangePasswordJson},
        TContext
      > => {

      const mutationOptions = getPutUserChangepasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteUserDelete = (
    
 ) => {
      
      
      return customInstance<void>(
      {url: `/user/delete`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteUserDeleteMutationOptions = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserDelete>>, TError,void, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteUserDelete>>, TError,void, TContext> => {
    
const mutationKey = ['deleteUserDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUserDelete>>, void> = () => {
          

          return  deleteUserDelete()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteUserDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUserDelete>>>
    
    export type DeleteUserDeleteMutationError = ResponseErrorJson

    export const useDeleteUserDelete = <TError = ResponseErrorJson,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUserDelete>>, TError,void, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof deleteUserDelete>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteUserDeleteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
